// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapInfoImpl();
void InitDefaultsMapInfo();
void InitDefaultsOtherPlayerInfoImpl();
void InitDefaultsOtherPlayerInfo();
void InitDefaultsSingePlayerInfoImpl();
void InitDefaultsSingePlayerInfo();
void InitDefaultsPlayerDivisionImpl();
void InitDefaultsPlayerDivision();
void InitDefaultsThornImpl();
void InitDefaultsThorn();
inline void InitDefaults() {
  InitDefaultsMapInfo();
  InitDefaultsOtherPlayerInfo();
  InitDefaultsSingePlayerInfo();
  InitDefaultsPlayerDivision();
  InitDefaultsThorn();
}
}  // namespace protobuf_player_2eproto
namespace player {
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class OtherPlayerInfo;
class OtherPlayerInfoDefaultTypeInternal;
extern OtherPlayerInfoDefaultTypeInternal _OtherPlayerInfo_default_instance_;
class PlayerDivision;
class PlayerDivisionDefaultTypeInternal;
extern PlayerDivisionDefaultTypeInternal _PlayerDivision_default_instance_;
class SingePlayerInfo;
class SingePlayerInfoDefaultTypeInternal;
extern SingePlayerInfoDefaultTypeInternal _SingePlayerInfo_default_instance_;
class Thorn;
class ThornDefaultTypeInternal;
extern ThornDefaultTypeInternal _Thorn_default_instance_;
}  // namespace player
namespace player {

// ===================================================================

class MapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player.MapInfo) */ {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapInfo* other);
  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .player.Thorn NewThorn = 3;
  int newthorn_size() const;
  void clear_newthorn();
  static const int kNewThornFieldNumber = 3;
  const ::player::Thorn& newthorn(int index) const;
  ::player::Thorn* mutable_newthorn(int index);
  ::player::Thorn* add_newthorn();
  ::google::protobuf::RepeatedPtrField< ::player::Thorn >*
      mutable_newthorn();
  const ::google::protobuf::RepeatedPtrField< ::player::Thorn >&
      newthorn() const;

  // .player.OtherPlayerInfo AllRival = 1;
  bool has_allrival() const;
  void clear_allrival();
  static const int kAllRivalFieldNumber = 1;
  const ::player::OtherPlayerInfo& allrival() const;
  ::player::OtherPlayerInfo* release_allrival();
  ::player::OtherPlayerInfo* mutable_allrival();
  void set_allocated_allrival(::player::OtherPlayerInfo* allrival);

  // int32 BeanSeed = 2;
  void clear_beanseed();
  static const int kBeanSeedFieldNumber = 2;
  ::google::protobuf::int32 beanseed() const;
  void set_beanseed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player.MapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::player::Thorn > newthorn_;
  ::player::OtherPlayerInfo* allrival_;
  ::google::protobuf::int32 beanseed_;
  mutable int _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsMapInfoImpl();
};
// -------------------------------------------------------------------

class OtherPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player.OtherPlayerInfo) */ {
 public:
  OtherPlayerInfo();
  virtual ~OtherPlayerInfo();

  OtherPlayerInfo(const OtherPlayerInfo& from);

  inline OtherPlayerInfo& operator=(const OtherPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OtherPlayerInfo(OtherPlayerInfo&& from) noexcept
    : OtherPlayerInfo() {
    *this = ::std::move(from);
  }

  inline OtherPlayerInfo& operator=(OtherPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const OtherPlayerInfo*>(
               &_OtherPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OtherPlayerInfo* other);
  friend void swap(OtherPlayerInfo& a, OtherPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OtherPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  OtherPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OtherPlayerInfo& from);
  void MergeFrom(const OtherPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OtherPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .player.SingePlayerInfo Rival = 1;
  int rival_size() const;
  void clear_rival();
  static const int kRivalFieldNumber = 1;
  const ::player::SingePlayerInfo& rival(int index) const;
  ::player::SingePlayerInfo* mutable_rival(int index);
  ::player::SingePlayerInfo* add_rival();
  ::google::protobuf::RepeatedPtrField< ::player::SingePlayerInfo >*
      mutable_rival();
  const ::google::protobuf::RepeatedPtrField< ::player::SingePlayerInfo >&
      rival() const;

  // int32 RivalNum = 2;
  void clear_rivalnum();
  static const int kRivalNumFieldNumber = 2;
  ::google::protobuf::int32 rivalnum() const;
  void set_rivalnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player.OtherPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::player::SingePlayerInfo > rival_;
  ::google::protobuf::int32 rivalnum_;
  mutable int _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsOtherPlayerInfoImpl();
};
// -------------------------------------------------------------------

class SingePlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player.SingePlayerInfo) */ {
 public:
  SingePlayerInfo();
  virtual ~SingePlayerInfo();

  SingePlayerInfo(const SingePlayerInfo& from);

  inline SingePlayerInfo& operator=(const SingePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingePlayerInfo(SingePlayerInfo&& from) noexcept
    : SingePlayerInfo() {
    *this = ::std::move(from);
  }

  inline SingePlayerInfo& operator=(SingePlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingePlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const SingePlayerInfo*>(
               &_SingePlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SingePlayerInfo* other);
  friend void swap(SingePlayerInfo& a, SingePlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingePlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SingePlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingePlayerInfo& from);
  void MergeFrom(const SingePlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingePlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .player.PlayerDivision division = 5;
  int division_size() const;
  void clear_division();
  static const int kDivisionFieldNumber = 5;
  const ::player::PlayerDivision& division(int index) const;
  ::player::PlayerDivision* mutable_division(int index);
  ::player::PlayerDivision* add_division();
  ::google::protobuf::RepeatedPtrField< ::player::PlayerDivision >*
      mutable_division();
  const ::google::protobuf::RepeatedPtrField< ::player::PlayerDivision >&
      division() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 skin = 2;
  void clear_skin();
  static const int kSkinFieldNumber = 2;
  ::google::protobuf::int32 skin() const;
  void set_skin(::google::protobuf::int32 value);

  // float vector_x = 3;
  void clear_vector_x();
  static const int kVectorXFieldNumber = 3;
  float vector_x() const;
  void set_vector_x(float value);

  // float vector_y = 4;
  void clear_vector_y();
  static const int kVectorYFieldNumber = 4;
  float vector_y() const;
  void set_vector_y(float value);

  // int32 DivisionNum = 6;
  void clear_divisionnum();
  static const int kDivisionNumFieldNumber = 6;
  ::google::protobuf::int32 divisionnum() const;
  void set_divisionnum(::google::protobuf::int32 value);

  // int32 DivideTimes = 7;
  void clear_dividetimes();
  static const int kDivideTimesFieldNumber = 7;
  ::google::protobuf::int32 dividetimes() const;
  void set_dividetimes(::google::protobuf::int32 value);

  // int32 SpitTimes = 8;
  void clear_spittimes();
  static const int kSpitTimesFieldNumber = 8;
  ::google::protobuf::int32 spittimes() const;
  void set_spittimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player.SingePlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::player::PlayerDivision > division_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 skin_;
  float vector_x_;
  float vector_y_;
  ::google::protobuf::int32 divisionnum_;
  ::google::protobuf::int32 dividetimes_;
  ::google::protobuf::int32 spittimes_;
  mutable int _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsSingePlayerInfoImpl();
};
// -------------------------------------------------------------------

class PlayerDivision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player.PlayerDivision) */ {
 public:
  PlayerDivision();
  virtual ~PlayerDivision();

  PlayerDivision(const PlayerDivision& from);

  inline PlayerDivision& operator=(const PlayerDivision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerDivision(PlayerDivision&& from) noexcept
    : PlayerDivision() {
    *this = ::std::move(from);
  }

  inline PlayerDivision& operator=(PlayerDivision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDivision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerDivision* internal_default_instance() {
    return reinterpret_cast<const PlayerDivision*>(
               &_PlayerDivision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerDivision* other);
  friend void swap(PlayerDivision& a, PlayerDivision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerDivision* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerDivision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerDivision& from);
  void MergeFrom(const PlayerDivision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerDivision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float position_x = 1;
  void clear_position_x();
  static const int kPositionXFieldNumber = 1;
  float position_x() const;
  void set_position_x(float value);

  // float position_y = 2;
  void clear_position_y();
  static const int kPositionYFieldNumber = 2;
  float position_y() const;
  void set_position_y(float value);

  // @@protoc_insertion_point(class_scope:player.PlayerDivision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float position_x_;
  float position_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsPlayerDivisionImpl();
};
// -------------------------------------------------------------------

class Thorn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player.Thorn) */ {
 public:
  Thorn();
  virtual ~Thorn();

  Thorn(const Thorn& from);

  inline Thorn& operator=(const Thorn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Thorn(Thorn&& from) noexcept
    : Thorn() {
    *this = ::std::move(from);
  }

  inline Thorn& operator=(Thorn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Thorn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Thorn* internal_default_instance() {
    return reinterpret_cast<const Thorn*>(
               &_Thorn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Thorn* other);
  friend void swap(Thorn& a, Thorn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Thorn* New() const PROTOBUF_FINAL { return New(NULL); }

  Thorn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Thorn& from);
  void MergeFrom(const Thorn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Thorn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 global = 1;
  void clear_global();
  static const int kGlobalFieldNumber = 1;
  ::google::protobuf::int32 global() const;
  void set_global(::google::protobuf::int32 value);

  // float position_x = 2;
  void clear_position_x();
  static const int kPositionXFieldNumber = 2;
  float position_x() const;
  void set_position_x(float value);

  // float position_y = 3;
  void clear_position_y();
  static const int kPositionYFieldNumber = 3;
  float position_y() const;
  void set_position_y(float value);

  // @@protoc_insertion_point(class_scope:player.Thorn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 global_;
  float position_x_;
  float position_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsThornImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapInfo

// .player.OtherPlayerInfo AllRival = 1;
inline bool MapInfo::has_allrival() const {
  return this != internal_default_instance() && allrival_ != NULL;
}
inline void MapInfo::clear_allrival() {
  if (GetArenaNoVirtual() == NULL && allrival_ != NULL) {
    delete allrival_;
  }
  allrival_ = NULL;
}
inline const ::player::OtherPlayerInfo& MapInfo::allrival() const {
  const ::player::OtherPlayerInfo* p = allrival_;
  // @@protoc_insertion_point(field_get:player.MapInfo.AllRival)
  return p != NULL ? *p : *reinterpret_cast<const ::player::OtherPlayerInfo*>(
      &::player::_OtherPlayerInfo_default_instance_);
}
inline ::player::OtherPlayerInfo* MapInfo::release_allrival() {
  // @@protoc_insertion_point(field_release:player.MapInfo.AllRival)
  
  ::player::OtherPlayerInfo* temp = allrival_;
  allrival_ = NULL;
  return temp;
}
inline ::player::OtherPlayerInfo* MapInfo::mutable_allrival() {
  
  if (allrival_ == NULL) {
    allrival_ = new ::player::OtherPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:player.MapInfo.AllRival)
  return allrival_;
}
inline void MapInfo::set_allocated_allrival(::player::OtherPlayerInfo* allrival) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allrival_;
  }
  if (allrival) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allrival = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allrival, submessage_arena);
    }
    
  } else {
    
  }
  allrival_ = allrival;
  // @@protoc_insertion_point(field_set_allocated:player.MapInfo.AllRival)
}

// int32 BeanSeed = 2;
inline void MapInfo::clear_beanseed() {
  beanseed_ = 0;
}
inline ::google::protobuf::int32 MapInfo::beanseed() const {
  // @@protoc_insertion_point(field_get:player.MapInfo.BeanSeed)
  return beanseed_;
}
inline void MapInfo::set_beanseed(::google::protobuf::int32 value) {
  
  beanseed_ = value;
  // @@protoc_insertion_point(field_set:player.MapInfo.BeanSeed)
}

// repeated .player.Thorn NewThorn = 3;
inline int MapInfo::newthorn_size() const {
  return newthorn_.size();
}
inline void MapInfo::clear_newthorn() {
  newthorn_.Clear();
}
inline const ::player::Thorn& MapInfo::newthorn(int index) const {
  // @@protoc_insertion_point(field_get:player.MapInfo.NewThorn)
  return newthorn_.Get(index);
}
inline ::player::Thorn* MapInfo::mutable_newthorn(int index) {
  // @@protoc_insertion_point(field_mutable:player.MapInfo.NewThorn)
  return newthorn_.Mutable(index);
}
inline ::player::Thorn* MapInfo::add_newthorn() {
  // @@protoc_insertion_point(field_add:player.MapInfo.NewThorn)
  return newthorn_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::player::Thorn >*
MapInfo::mutable_newthorn() {
  // @@protoc_insertion_point(field_mutable_list:player.MapInfo.NewThorn)
  return &newthorn_;
}
inline const ::google::protobuf::RepeatedPtrField< ::player::Thorn >&
MapInfo::newthorn() const {
  // @@protoc_insertion_point(field_list:player.MapInfo.NewThorn)
  return newthorn_;
}

// -------------------------------------------------------------------

// OtherPlayerInfo

// repeated .player.SingePlayerInfo Rival = 1;
inline int OtherPlayerInfo::rival_size() const {
  return rival_.size();
}
inline void OtherPlayerInfo::clear_rival() {
  rival_.Clear();
}
inline const ::player::SingePlayerInfo& OtherPlayerInfo::rival(int index) const {
  // @@protoc_insertion_point(field_get:player.OtherPlayerInfo.Rival)
  return rival_.Get(index);
}
inline ::player::SingePlayerInfo* OtherPlayerInfo::mutable_rival(int index) {
  // @@protoc_insertion_point(field_mutable:player.OtherPlayerInfo.Rival)
  return rival_.Mutable(index);
}
inline ::player::SingePlayerInfo* OtherPlayerInfo::add_rival() {
  // @@protoc_insertion_point(field_add:player.OtherPlayerInfo.Rival)
  return rival_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::player::SingePlayerInfo >*
OtherPlayerInfo::mutable_rival() {
  // @@protoc_insertion_point(field_mutable_list:player.OtherPlayerInfo.Rival)
  return &rival_;
}
inline const ::google::protobuf::RepeatedPtrField< ::player::SingePlayerInfo >&
OtherPlayerInfo::rival() const {
  // @@protoc_insertion_point(field_list:player.OtherPlayerInfo.Rival)
  return rival_;
}

// int32 RivalNum = 2;
inline void OtherPlayerInfo::clear_rivalnum() {
  rivalnum_ = 0;
}
inline ::google::protobuf::int32 OtherPlayerInfo::rivalnum() const {
  // @@protoc_insertion_point(field_get:player.OtherPlayerInfo.RivalNum)
  return rivalnum_;
}
inline void OtherPlayerInfo::set_rivalnum(::google::protobuf::int32 value) {
  
  rivalnum_ = value;
  // @@protoc_insertion_point(field_set:player.OtherPlayerInfo.RivalNum)
}

// -------------------------------------------------------------------

// SingePlayerInfo

// string name = 1;
inline void SingePlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingePlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.name)
  return name_.GetNoArena();
}
inline void SingePlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.name)
}
#if LANG_CXX11
inline void SingePlayerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player.SingePlayerInfo.name)
}
#endif
inline void SingePlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player.SingePlayerInfo.name)
}
inline void SingePlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player.SingePlayerInfo.name)
}
inline ::std::string* SingePlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:player.SingePlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingePlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:player.SingePlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingePlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:player.SingePlayerInfo.name)
}

// int32 skin = 2;
inline void SingePlayerInfo::clear_skin() {
  skin_ = 0;
}
inline ::google::protobuf::int32 SingePlayerInfo::skin() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.skin)
  return skin_;
}
inline void SingePlayerInfo::set_skin(::google::protobuf::int32 value) {
  
  skin_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.skin)
}

// float vector_x = 3;
inline void SingePlayerInfo::clear_vector_x() {
  vector_x_ = 0;
}
inline float SingePlayerInfo::vector_x() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.vector_x)
  return vector_x_;
}
inline void SingePlayerInfo::set_vector_x(float value) {
  
  vector_x_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.vector_x)
}

// float vector_y = 4;
inline void SingePlayerInfo::clear_vector_y() {
  vector_y_ = 0;
}
inline float SingePlayerInfo::vector_y() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.vector_y)
  return vector_y_;
}
inline void SingePlayerInfo::set_vector_y(float value) {
  
  vector_y_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.vector_y)
}

// repeated .player.PlayerDivision division = 5;
inline int SingePlayerInfo::division_size() const {
  return division_.size();
}
inline void SingePlayerInfo::clear_division() {
  division_.Clear();
}
inline const ::player::PlayerDivision& SingePlayerInfo::division(int index) const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.division)
  return division_.Get(index);
}
inline ::player::PlayerDivision* SingePlayerInfo::mutable_division(int index) {
  // @@protoc_insertion_point(field_mutable:player.SingePlayerInfo.division)
  return division_.Mutable(index);
}
inline ::player::PlayerDivision* SingePlayerInfo::add_division() {
  // @@protoc_insertion_point(field_add:player.SingePlayerInfo.division)
  return division_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::player::PlayerDivision >*
SingePlayerInfo::mutable_division() {
  // @@protoc_insertion_point(field_mutable_list:player.SingePlayerInfo.division)
  return &division_;
}
inline const ::google::protobuf::RepeatedPtrField< ::player::PlayerDivision >&
SingePlayerInfo::division() const {
  // @@protoc_insertion_point(field_list:player.SingePlayerInfo.division)
  return division_;
}

// int32 DivisionNum = 6;
inline void SingePlayerInfo::clear_divisionnum() {
  divisionnum_ = 0;
}
inline ::google::protobuf::int32 SingePlayerInfo::divisionnum() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.DivisionNum)
  return divisionnum_;
}
inline void SingePlayerInfo::set_divisionnum(::google::protobuf::int32 value) {
  
  divisionnum_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.DivisionNum)
}

// int32 DivideTimes = 7;
inline void SingePlayerInfo::clear_dividetimes() {
  dividetimes_ = 0;
}
inline ::google::protobuf::int32 SingePlayerInfo::dividetimes() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.DivideTimes)
  return dividetimes_;
}
inline void SingePlayerInfo::set_dividetimes(::google::protobuf::int32 value) {
  
  dividetimes_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.DivideTimes)
}

// int32 SpitTimes = 8;
inline void SingePlayerInfo::clear_spittimes() {
  spittimes_ = 0;
}
inline ::google::protobuf::int32 SingePlayerInfo::spittimes() const {
  // @@protoc_insertion_point(field_get:player.SingePlayerInfo.SpitTimes)
  return spittimes_;
}
inline void SingePlayerInfo::set_spittimes(::google::protobuf::int32 value) {
  
  spittimes_ = value;
  // @@protoc_insertion_point(field_set:player.SingePlayerInfo.SpitTimes)
}

// -------------------------------------------------------------------

// PlayerDivision

// float position_x = 1;
inline void PlayerDivision::clear_position_x() {
  position_x_ = 0;
}
inline float PlayerDivision::position_x() const {
  // @@protoc_insertion_point(field_get:player.PlayerDivision.position_x)
  return position_x_;
}
inline void PlayerDivision::set_position_x(float value) {
  
  position_x_ = value;
  // @@protoc_insertion_point(field_set:player.PlayerDivision.position_x)
}

// float position_y = 2;
inline void PlayerDivision::clear_position_y() {
  position_y_ = 0;
}
inline float PlayerDivision::position_y() const {
  // @@protoc_insertion_point(field_get:player.PlayerDivision.position_y)
  return position_y_;
}
inline void PlayerDivision::set_position_y(float value) {
  
  position_y_ = value;
  // @@protoc_insertion_point(field_set:player.PlayerDivision.position_y)
}

// -------------------------------------------------------------------

// Thorn

// int32 global = 1;
inline void Thorn::clear_global() {
  global_ = 0;
}
inline ::google::protobuf::int32 Thorn::global() const {
  // @@protoc_insertion_point(field_get:player.Thorn.global)
  return global_;
}
inline void Thorn::set_global(::google::protobuf::int32 value) {
  
  global_ = value;
  // @@protoc_insertion_point(field_set:player.Thorn.global)
}

// float position_x = 2;
inline void Thorn::clear_position_x() {
  position_x_ = 0;
}
inline float Thorn::position_x() const {
  // @@protoc_insertion_point(field_get:player.Thorn.position_x)
  return position_x_;
}
inline void Thorn::set_position_x(float value) {
  
  position_x_ = value;
  // @@protoc_insertion_point(field_set:player.Thorn.position_x)
}

// float position_y = 3;
inline void Thorn::clear_position_y() {
  position_y_ = 0;
}
inline float Thorn::position_y() const {
  // @@protoc_insertion_point(field_get:player.Thorn.position_y)
  return position_y_;
}
inline void Thorn::set_position_y(float value) {
  
  position_y_ = value;
  // @@protoc_insertion_point(field_set:player.Thorn.position_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
