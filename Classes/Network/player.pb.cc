// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace player {
class MapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapInfo>
      _instance;
} _MapInfo_default_instance_;
class OtherPlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OtherPlayerInfo>
      _instance;
} _OtherPlayerInfo_default_instance_;
class SingePlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingePlayerInfo>
      _instance;
} _SingePlayerInfo_default_instance_;
class PlayerDivisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDivision>
      _instance;
} _PlayerDivision_default_instance_;
class ThornDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Thorn>
      _instance;
} _Thorn_default_instance_;
}  // namespace player
namespace protobuf_player_2eproto {
void InitDefaultsMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_player_2eproto::InitDefaultsOtherPlayerInfo();
  protobuf_player_2eproto::InitDefaultsThorn();
  {
    void* ptr = &::player::_MapInfo_default_instance_;
    new (ptr) ::player::MapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::player::MapInfo::InitAsDefaultInstance();
}

void InitDefaultsMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapInfoImpl);
}

void InitDefaultsOtherPlayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_player_2eproto::InitDefaultsSingePlayerInfo();
  {
    void* ptr = &::player::_OtherPlayerInfo_default_instance_;
    new (ptr) ::player::OtherPlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::player::OtherPlayerInfo::InitAsDefaultInstance();
}

void InitDefaultsOtherPlayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOtherPlayerInfoImpl);
}

void InitDefaultsSingePlayerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_player_2eproto::InitDefaultsPlayerDivision();
  {
    void* ptr = &::player::_SingePlayerInfo_default_instance_;
    new (ptr) ::player::SingePlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::player::SingePlayerInfo::InitAsDefaultInstance();
}

void InitDefaultsSingePlayerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingePlayerInfoImpl);
}

void InitDefaultsPlayerDivisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::player::_PlayerDivision_default_instance_;
    new (ptr) ::player::PlayerDivision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::player::PlayerDivision::InitAsDefaultInstance();
}

void InitDefaultsPlayerDivision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerDivisionImpl);
}

void InitDefaultsThornImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::player::_Thorn_default_instance_;
    new (ptr) ::player::Thorn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::player::Thorn::InitAsDefaultInstance();
}

void InitDefaultsThorn() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsThornImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::MapInfo, allrival_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::MapInfo, beanseed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::MapInfo, newthorn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::OtherPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::OtherPlayerInfo, rival_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::OtherPlayerInfo, rivalnum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, skin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, vector_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, vector_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, divisionnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, dividetimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::SingePlayerInfo, spittimes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::PlayerDivision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::PlayerDivision, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::PlayerDivision, position_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::Thorn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::Thorn, global_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::Thorn, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::player::Thorn, position_y_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::player::MapInfo)},
  { 8, -1, sizeof(::player::OtherPlayerInfo)},
  { 15, -1, sizeof(::player::SingePlayerInfo)},
  { 28, -1, sizeof(::player::PlayerDivision)},
  { 35, -1, sizeof(::player::Thorn)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::player::_MapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::player::_OtherPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::player::_SingePlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::player::_PlayerDivision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::player::_Thorn_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "player.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014player.proto\022\006player\"g\n\007MapInfo\022)\n\010All"
      "Rival\030\001 \001(\0132\027.player.OtherPlayerInfo\022\020\n\010"
      "BeanSeed\030\002 \001(\005\022\037\n\010NewThorn\030\003 \003(\0132\r.playe"
      "r.Thorn\"K\n\017OtherPlayerInfo\022&\n\005Rival\030\001 \003("
      "\0132\027.player.SingePlayerInfo\022\020\n\010RivalNum\030\002"
      " \001(\005\"\270\001\n\017SingePlayerInfo\022\014\n\004name\030\001 \001(\t\022\014"
      "\n\004skin\030\002 \001(\005\022\020\n\010vector_x\030\003 \001(\002\022\020\n\010vector"
      "_y\030\004 \001(\002\022(\n\010division\030\005 \003(\0132\026.player.Play"
      "erDivision\022\023\n\013DivisionNum\030\006 \001(\005\022\023\n\013Divid"
      "eTimes\030\007 \001(\005\022\021\n\tSpitTimes\030\010 \001(\005\"8\n\016Playe"
      "rDivision\022\022\n\nposition_x\030\001 \001(\002\022\022\n\npositio"
      "n_y\030\002 \001(\002\"\?\n\005Thorn\022\016\n\006global\030\001 \001(\005\022\022\n\npo"
      "sition_x\030\002 \001(\002\022\022\n\nposition_y\030\003 \001(\0022B\n\006Pl"
      "ayer\0228\n\nPlayerInfo\022\027.player.SingePlayerI"
      "nfo\032\017.player.MapInfo\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_player_2eproto
namespace player {

// ===================================================================

void MapInfo::InitAsDefaultInstance() {
  ::player::_MapInfo_default_instance_._instance.get_mutable()->allrival_ = const_cast< ::player::OtherPlayerInfo*>(
      ::player::OtherPlayerInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapInfo::kAllRivalFieldNumber;
const int MapInfo::kBeanSeedFieldNumber;
const int MapInfo::kNewThornFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapInfo::MapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:player.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      newthorn_(from.newthorn_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_allrival()) {
    allrival_ = new ::player::OtherPlayerInfo(*from.allrival_);
  } else {
    allrival_ = NULL;
  }
  beanseed_ = from.beanseed_;
  // @@protoc_insertion_point(copy_constructor:player.MapInfo)
}

void MapInfo::SharedCtor() {
  ::memset(&allrival_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beanseed_) -
      reinterpret_cast<char*>(&allrival_)) + sizeof(beanseed_));
  _cached_size_ = 0;
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:player.MapInfo)
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete allrival_;
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapInfo& MapInfo::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsMapInfo();
  return *internal_default_instance();
}

MapInfo* MapInfo::New(::google::protobuf::Arena* arena) const {
  MapInfo* n = new MapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:player.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newthorn_.Clear();
  if (GetArenaNoVirtual() == NULL && allrival_ != NULL) {
    delete allrival_;
  }
  allrival_ = NULL;
  beanseed_ = 0;
  _internal_metadata_.Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:player.MapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .player.OtherPlayerInfo AllRival = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_allrival()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BeanSeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beanseed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .player.Thorn NewThorn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_newthorn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:player.MapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:player.MapInfo)
  return false;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:player.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .player.OtherPlayerInfo AllRival = 1;
  if (this->has_allrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->allrival_, output);
  }

  // int32 BeanSeed = 2;
  if (this->beanseed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beanseed(), output);
  }

  // repeated .player.Thorn NewThorn = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newthorn_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newthorn(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:player.MapInfo)
}

::google::protobuf::uint8* MapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:player.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .player.OtherPlayerInfo AllRival = 1;
  if (this->has_allrival()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->allrival_, deterministic, target);
  }

  // int32 BeanSeed = 2;
  if (this->beanseed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beanseed(), target);
  }

  // repeated .player.Thorn NewThorn = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newthorn_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->newthorn(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player.MapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .player.Thorn NewThorn = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->newthorn_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->newthorn(static_cast<int>(i)));
    }
  }

  // .player.OtherPlayerInfo AllRival = 1;
  if (this->has_allrival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->allrival_);
  }

  // int32 BeanSeed = 2;
  if (this->beanseed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beanseed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:player.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:player.MapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:player.MapInfo)
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  newthorn_.MergeFrom(from.newthorn_);
  if (from.has_allrival()) {
    mutable_allrival()->::player::OtherPlayerInfo::MergeFrom(from.allrival());
  }
  if (from.beanseed() != 0) {
    set_beanseed(from.beanseed());
  }
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:player.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  newthorn_.InternalSwap(&other->newthorn_);
  swap(allrival_, other->allrival_);
  swap(beanseed_, other->beanseed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OtherPlayerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OtherPlayerInfo::kRivalFieldNumber;
const int OtherPlayerInfo::kRivalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OtherPlayerInfo::OtherPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsOtherPlayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:player.OtherPlayerInfo)
}
OtherPlayerInfo::OtherPlayerInfo(const OtherPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rival_(from.rival_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rivalnum_ = from.rivalnum_;
  // @@protoc_insertion_point(copy_constructor:player.OtherPlayerInfo)
}

void OtherPlayerInfo::SharedCtor() {
  rivalnum_ = 0;
  _cached_size_ = 0;
}

OtherPlayerInfo::~OtherPlayerInfo() {
  // @@protoc_insertion_point(destructor:player.OtherPlayerInfo)
  SharedDtor();
}

void OtherPlayerInfo::SharedDtor() {
}

void OtherPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherPlayerInfo::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OtherPlayerInfo& OtherPlayerInfo::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsOtherPlayerInfo();
  return *internal_default_instance();
}

OtherPlayerInfo* OtherPlayerInfo::New(::google::protobuf::Arena* arena) const {
  OtherPlayerInfo* n = new OtherPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OtherPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:player.OtherPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rival_.Clear();
  rivalnum_ = 0;
  _internal_metadata_.Clear();
}

bool OtherPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:player.OtherPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .player.SingePlayerInfo Rival = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rival()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RivalNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rivalnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:player.OtherPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:player.OtherPlayerInfo)
  return false;
#undef DO_
}

void OtherPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:player.OtherPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .player.SingePlayerInfo Rival = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rival_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rival(static_cast<int>(i)), output);
  }

  // int32 RivalNum = 2;
  if (this->rivalnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rivalnum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:player.OtherPlayerInfo)
}

::google::protobuf::uint8* OtherPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:player.OtherPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .player.SingePlayerInfo Rival = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rival_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rival(static_cast<int>(i)), deterministic, target);
  }

  // int32 RivalNum = 2;
  if (this->rivalnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rivalnum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player.OtherPlayerInfo)
  return target;
}

size_t OtherPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player.OtherPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .player.SingePlayerInfo Rival = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rival_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rival(static_cast<int>(i)));
    }
  }

  // int32 RivalNum = 2;
  if (this->rivalnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rivalnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:player.OtherPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OtherPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:player.OtherPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:player.OtherPlayerInfo)
    MergeFrom(*source);
  }
}

void OtherPlayerInfo::MergeFrom(const OtherPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player.OtherPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rival_.MergeFrom(from.rival_);
  if (from.rivalnum() != 0) {
    set_rivalnum(from.rivalnum());
  }
}

void OtherPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:player.OtherPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherPlayerInfo::CopyFrom(const OtherPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player.OtherPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherPlayerInfo::IsInitialized() const {
  return true;
}

void OtherPlayerInfo::Swap(OtherPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OtherPlayerInfo::InternalSwap(OtherPlayerInfo* other) {
  using std::swap;
  rival_.InternalSwap(&other->rival_);
  swap(rivalnum_, other->rivalnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OtherPlayerInfo::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingePlayerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingePlayerInfo::kNameFieldNumber;
const int SingePlayerInfo::kSkinFieldNumber;
const int SingePlayerInfo::kVectorXFieldNumber;
const int SingePlayerInfo::kVectorYFieldNumber;
const int SingePlayerInfo::kDivisionFieldNumber;
const int SingePlayerInfo::kDivisionNumFieldNumber;
const int SingePlayerInfo::kDivideTimesFieldNumber;
const int SingePlayerInfo::kSpitTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingePlayerInfo::SingePlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsSingePlayerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:player.SingePlayerInfo)
}
SingePlayerInfo::SingePlayerInfo(const SingePlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      division_(from.division_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&skin_, &from.skin_,
    static_cast<size_t>(reinterpret_cast<char*>(&spittimes_) -
    reinterpret_cast<char*>(&skin_)) + sizeof(spittimes_));
  // @@protoc_insertion_point(copy_constructor:player.SingePlayerInfo)
}

void SingePlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&skin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spittimes_) -
      reinterpret_cast<char*>(&skin_)) + sizeof(spittimes_));
  _cached_size_ = 0;
}

SingePlayerInfo::~SingePlayerInfo() {
  // @@protoc_insertion_point(destructor:player.SingePlayerInfo)
  SharedDtor();
}

void SingePlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingePlayerInfo::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingePlayerInfo& SingePlayerInfo::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsSingePlayerInfo();
  return *internal_default_instance();
}

SingePlayerInfo* SingePlayerInfo::New(::google::protobuf::Arena* arena) const {
  SingePlayerInfo* n = new SingePlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:player.SingePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  division_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&skin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spittimes_) -
      reinterpret_cast<char*>(&skin_)) + sizeof(spittimes_));
  _internal_metadata_.Clear();
}

bool SingePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:player.SingePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "player.SingePlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 skin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vector_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vector_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .player.PlayerDivision division = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_division()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DivisionNum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divisionnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DivideTimes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dividetimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SpitTimes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spittimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:player.SingePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:player.SingePlayerInfo)
  return false;
#undef DO_
}

void SingePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:player.SingePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "player.SingePlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 skin = 2;
  if (this->skin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skin(), output);
  }

  // float vector_x = 3;
  if (this->vector_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vector_x(), output);
  }

  // float vector_y = 4;
  if (this->vector_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vector_y(), output);
  }

  // repeated .player.PlayerDivision division = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->division_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->division(static_cast<int>(i)), output);
  }

  // int32 DivisionNum = 6;
  if (this->divisionnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->divisionnum(), output);
  }

  // int32 DivideTimes = 7;
  if (this->dividetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dividetimes(), output);
  }

  // int32 SpitTimes = 8;
  if (this->spittimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spittimes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:player.SingePlayerInfo)
}

::google::protobuf::uint8* SingePlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:player.SingePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "player.SingePlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 skin = 2;
  if (this->skin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skin(), target);
  }

  // float vector_x = 3;
  if (this->vector_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vector_x(), target);
  }

  // float vector_y = 4;
  if (this->vector_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vector_y(), target);
  }

  // repeated .player.PlayerDivision division = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->division_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->division(static_cast<int>(i)), deterministic, target);
  }

  // int32 DivisionNum = 6;
  if (this->divisionnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->divisionnum(), target);
  }

  // int32 DivideTimes = 7;
  if (this->dividetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dividetimes(), target);
  }

  // int32 SpitTimes = 8;
  if (this->spittimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spittimes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player.SingePlayerInfo)
  return target;
}

size_t SingePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player.SingePlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .player.PlayerDivision division = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->division_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->division(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 skin = 2;
  if (this->skin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skin());
  }

  // float vector_x = 3;
  if (this->vector_x() != 0) {
    total_size += 1 + 4;
  }

  // float vector_y = 4;
  if (this->vector_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 DivisionNum = 6;
  if (this->divisionnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->divisionnum());
  }

  // int32 DivideTimes = 7;
  if (this->dividetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dividetimes());
  }

  // int32 SpitTimes = 8;
  if (this->spittimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spittimes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:player.SingePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SingePlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingePlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:player.SingePlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:player.SingePlayerInfo)
    MergeFrom(*source);
  }
}

void SingePlayerInfo::MergeFrom(const SingePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player.SingePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  division_.MergeFrom(from.division_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.skin() != 0) {
    set_skin(from.skin());
  }
  if (from.vector_x() != 0) {
    set_vector_x(from.vector_x());
  }
  if (from.vector_y() != 0) {
    set_vector_y(from.vector_y());
  }
  if (from.divisionnum() != 0) {
    set_divisionnum(from.divisionnum());
  }
  if (from.dividetimes() != 0) {
    set_dividetimes(from.dividetimes());
  }
  if (from.spittimes() != 0) {
    set_spittimes(from.spittimes());
  }
}

void SingePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:player.SingePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingePlayerInfo::CopyFrom(const SingePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player.SingePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingePlayerInfo::IsInitialized() const {
  return true;
}

void SingePlayerInfo::Swap(SingePlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingePlayerInfo::InternalSwap(SingePlayerInfo* other) {
  using std::swap;
  division_.InternalSwap(&other->division_);
  name_.Swap(&other->name_);
  swap(skin_, other->skin_);
  swap(vector_x_, other->vector_x_);
  swap(vector_y_, other->vector_y_);
  swap(divisionnum_, other->divisionnum_);
  swap(dividetimes_, other->dividetimes_);
  swap(spittimes_, other->spittimes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingePlayerInfo::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerDivision::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDivision::kPositionXFieldNumber;
const int PlayerDivision::kPositionYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDivision::PlayerDivision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsPlayerDivision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:player.PlayerDivision)
}
PlayerDivision::PlayerDivision(const PlayerDivision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_x_, &from.position_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_y_) -
    reinterpret_cast<char*>(&position_x_)) + sizeof(position_y_));
  // @@protoc_insertion_point(copy_constructor:player.PlayerDivision)
}

void PlayerDivision::SharedCtor() {
  ::memset(&position_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&position_x_)) + sizeof(position_y_));
  _cached_size_ = 0;
}

PlayerDivision::~PlayerDivision() {
  // @@protoc_insertion_point(destructor:player.PlayerDivision)
  SharedDtor();
}

void PlayerDivision::SharedDtor() {
}

void PlayerDivision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDivision::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerDivision& PlayerDivision::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsPlayerDivision();
  return *internal_default_instance();
}

PlayerDivision* PlayerDivision::New(::google::protobuf::Arena* arena) const {
  PlayerDivision* n = new PlayerDivision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerDivision::Clear() {
// @@protoc_insertion_point(message_clear_start:player.PlayerDivision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&position_x_)) + sizeof(position_y_));
  _internal_metadata_.Clear();
}

bool PlayerDivision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:player.PlayerDivision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float position_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:player.PlayerDivision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:player.PlayerDivision)
  return false;
#undef DO_
}

void PlayerDivision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:player.PlayerDivision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position_x = 1;
  if (this->position_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position_x(), output);
  }

  // float position_y = 2;
  if (this->position_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:player.PlayerDivision)
}

::google::protobuf::uint8* PlayerDivision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:player.PlayerDivision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float position_x = 1;
  if (this->position_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position_x(), target);
  }

  // float position_y = 2;
  if (this->position_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player.PlayerDivision)
  return target;
}

size_t PlayerDivision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player.PlayerDivision)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float position_x = 1;
  if (this->position_x() != 0) {
    total_size += 1 + 4;
  }

  // float position_y = 2;
  if (this->position_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDivision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:player.PlayerDivision)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDivision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerDivision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:player.PlayerDivision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:player.PlayerDivision)
    MergeFrom(*source);
  }
}

void PlayerDivision::MergeFrom(const PlayerDivision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player.PlayerDivision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position_x() != 0) {
    set_position_x(from.position_x());
  }
  if (from.position_y() != 0) {
    set_position_y(from.position_y());
  }
}

void PlayerDivision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:player.PlayerDivision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDivision::CopyFrom(const PlayerDivision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player.PlayerDivision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDivision::IsInitialized() const {
  return true;
}

void PlayerDivision::Swap(PlayerDivision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDivision::InternalSwap(PlayerDivision* other) {
  using std::swap;
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerDivision::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Thorn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Thorn::kGlobalFieldNumber;
const int Thorn::kPositionXFieldNumber;
const int Thorn::kPositionYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Thorn::Thorn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsThorn();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:player.Thorn)
}
Thorn::Thorn(const Thorn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&global_, &from.global_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_y_) -
    reinterpret_cast<char*>(&global_)) + sizeof(position_y_));
  // @@protoc_insertion_point(copy_constructor:player.Thorn)
}

void Thorn::SharedCtor() {
  ::memset(&global_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&global_)) + sizeof(position_y_));
  _cached_size_ = 0;
}

Thorn::~Thorn() {
  // @@protoc_insertion_point(destructor:player.Thorn)
  SharedDtor();
}

void Thorn::SharedDtor() {
}

void Thorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thorn::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Thorn& Thorn::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsThorn();
  return *internal_default_instance();
}

Thorn* Thorn::New(::google::protobuf::Arena* arena) const {
  Thorn* n = new Thorn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Thorn::Clear() {
// @@protoc_insertion_point(message_clear_start:player.Thorn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&global_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&global_)) + sizeof(position_y_));
  _internal_metadata_.Clear();
}

bool Thorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:player.Thorn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float position_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:player.Thorn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:player.Thorn)
  return false;
#undef DO_
}

void Thorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:player.Thorn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 global = 1;
  if (this->global() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->global(), output);
  }

  // float position_x = 2;
  if (this->position_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_x(), output);
  }

  // float position_y = 3;
  if (this->position_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:player.Thorn)
}

::google::protobuf::uint8* Thorn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:player.Thorn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 global = 1;
  if (this->global() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->global(), target);
  }

  // float position_x = 2;
  if (this->position_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_x(), target);
  }

  // float position_y = 3;
  if (this->position_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player.Thorn)
  return target;
}

size_t Thorn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player.Thorn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 global = 1;
  if (this->global() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->global());
  }

  // float position_x = 2;
  if (this->position_x() != 0) {
    total_size += 1 + 4;
  }

  // float position_y = 3;
  if (this->position_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thorn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:player.Thorn)
  GOOGLE_DCHECK_NE(&from, this);
  const Thorn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Thorn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:player.Thorn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:player.Thorn)
    MergeFrom(*source);
  }
}

void Thorn::MergeFrom(const Thorn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player.Thorn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.global() != 0) {
    set_global(from.global());
  }
  if (from.position_x() != 0) {
    set_position_x(from.position_x());
  }
  if (from.position_y() != 0) {
    set_position_y(from.position_y());
  }
}

void Thorn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:player.Thorn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thorn::CopyFrom(const Thorn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player.Thorn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thorn::IsInitialized() const {
  return true;
}

void Thorn::Swap(Thorn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Thorn::InternalSwap(Thorn* other) {
  using std::swap;
  swap(global_, other->global_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Thorn::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace player

// @@protoc_insertion_point(global_scope)
